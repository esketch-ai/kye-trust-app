/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface KyeTrustInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "applyPenalty"
      | "assignRole"
      | "confirmationCount"
      | "confirmations"
      | "contribute"
      | "contributionAmount"
      | "currentTurn"
      | "duration"
      | "getConfirmationStatus"
      | "getRole"
      | "getState"
      | "goalAmount"
      | "hasAllContributedForCurrentTurn"
      | "hasPaid"
      | "isMember"
      | "isOverdue"
      | "lastPaidTurn"
      | "memberRoles"
      | "members"
      | "multiSigEnabled"
      | "name"
      | "owner"
      | "payout"
      | "pot"
      | "requiredConfirmations"
      | "start"
      | "state"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ContributionReceived"
      | "KyeStarted"
      | "PayoutMade"
      | "PenaltyApplied"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "applyPenalty",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "assignRole",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "confirmationCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "confirmations",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "contribute",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contributionAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentTurn",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "duration", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getConfirmationStatus",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "getState", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "goalAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasAllContributedForCurrentTurn",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasPaid",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isMember",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isOverdue",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lastPaidTurn",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "memberRoles",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "members",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "multiSigEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "payout", values?: undefined): string;
  encodeFunctionData(functionFragment: "pot", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "requiredConfirmations",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "start", values?: undefined): string;
  encodeFunctionData(functionFragment: "state", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "applyPenalty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "assignRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "confirmationCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "contribute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "contributionAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentTurn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "duration", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getConfirmationStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getState", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "goalAmount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasAllContributedForCurrentTurn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasPaid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isMember", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isOverdue", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastPaidTurn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "memberRoles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "members", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "multiSigEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payout", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pot", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "requiredConfirmations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "start", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "state", data: BytesLike): Result;
}

export namespace ContributionReceivedEvent {
  export type InputTuple = [
    member: AddressLike,
    turn: BigNumberish,
    amount: BigNumberish
  ];
  export type OutputTuple = [member: string, turn: bigint, amount: bigint];
  export interface OutputObject {
    member: string;
    turn: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace KyeStartedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PayoutMadeEvent {
  export type InputTuple = [
    recipient: AddressLike,
    turn: BigNumberish,
    amount: BigNumberish
  ];
  export type OutputTuple = [recipient: string, turn: bigint, amount: bigint];
  export interface OutputObject {
    recipient: string;
    turn: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PenaltyAppliedEvent {
  export type InputTuple = [
    member: AddressLike,
    turn: BigNumberish,
    penaltyAmount: BigNumberish
  ];
  export type OutputTuple = [
    member: string,
    turn: bigint,
    penaltyAmount: bigint
  ];
  export interface OutputObject {
    member: string;
    turn: bigint;
    penaltyAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface KyeTrust extends BaseContract {
  connect(runner?: ContractRunner | null): KyeTrust;
  waitForDeployment(): Promise<this>;

  interface: KyeTrustInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  applyPenalty: TypedContractMethod<
    [_member: AddressLike],
    [void],
    "nonpayable"
  >;

  assignRole: TypedContractMethod<
    [_member: AddressLike, _role: BigNumberish],
    [void],
    "nonpayable"
  >;

  confirmationCount: TypedContractMethod<[arg0: BytesLike], [bigint], "view">;

  confirmations: TypedContractMethod<
    [arg0: BytesLike, arg1: AddressLike],
    [boolean],
    "view"
  >;

  contribute: TypedContractMethod<[], [void], "payable">;

  contributionAmount: TypedContractMethod<[], [bigint], "view">;

  currentTurn: TypedContractMethod<[], [bigint], "view">;

  duration: TypedContractMethod<[], [bigint], "view">;

  getConfirmationStatus: TypedContractMethod<
    [_actionHash: BytesLike],
    [[bigint, boolean]],
    "view"
  >;

  getRole: TypedContractMethod<[_member: AddressLike], [bigint], "view">;

  getState: TypedContractMethod<[], [string], "view">;

  goalAmount: TypedContractMethod<[], [bigint], "view">;

  hasAllContributedForCurrentTurn: TypedContractMethod<[], [boolean], "view">;

  hasPaid: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;

  isMember: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  isOverdue: TypedContractMethod<[_member: AddressLike], [boolean], "view">;

  lastPaidTurn: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  memberRoles: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  members: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  multiSigEnabled: TypedContractMethod<[], [boolean], "view">;

  name: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  payout: TypedContractMethod<[], [void], "nonpayable">;

  pot: TypedContractMethod<[], [bigint], "view">;

  requiredConfirmations: TypedContractMethod<[], [bigint], "view">;

  start: TypedContractMethod<[], [void], "nonpayable">;

  state: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "applyPenalty"
  ): TypedContractMethod<[_member: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "assignRole"
  ): TypedContractMethod<
    [_member: AddressLike, _role: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "confirmationCount"
  ): TypedContractMethod<[arg0: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "confirmations"
  ): TypedContractMethod<
    [arg0: BytesLike, arg1: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "contribute"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "contributionAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "currentTurn"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "duration"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getConfirmationStatus"
  ): TypedContractMethod<[_actionHash: BytesLike], [[bigint, boolean]], "view">;
  getFunction(
    nameOrSignature: "getRole"
  ): TypedContractMethod<[_member: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getState"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "goalAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "hasAllContributedForCurrentTurn"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "hasPaid"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isMember"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isOverdue"
  ): TypedContractMethod<[_member: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "lastPaidTurn"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "memberRoles"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "members"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "multiSigEnabled"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "payout"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "pot"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "requiredConfirmations"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "start"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "state"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "ContributionReceived"
  ): TypedContractEvent<
    ContributionReceivedEvent.InputTuple,
    ContributionReceivedEvent.OutputTuple,
    ContributionReceivedEvent.OutputObject
  >;
  getEvent(
    key: "KyeStarted"
  ): TypedContractEvent<
    KyeStartedEvent.InputTuple,
    KyeStartedEvent.OutputTuple,
    KyeStartedEvent.OutputObject
  >;
  getEvent(
    key: "PayoutMade"
  ): TypedContractEvent<
    PayoutMadeEvent.InputTuple,
    PayoutMadeEvent.OutputTuple,
    PayoutMadeEvent.OutputObject
  >;
  getEvent(
    key: "PenaltyApplied"
  ): TypedContractEvent<
    PenaltyAppliedEvent.InputTuple,
    PenaltyAppliedEvent.OutputTuple,
    PenaltyAppliedEvent.OutputObject
  >;

  filters: {
    "ContributionReceived(address,uint256,uint256)": TypedContractEvent<
      ContributionReceivedEvent.InputTuple,
      ContributionReceivedEvent.OutputTuple,
      ContributionReceivedEvent.OutputObject
    >;
    ContributionReceived: TypedContractEvent<
      ContributionReceivedEvent.InputTuple,
      ContributionReceivedEvent.OutputTuple,
      ContributionReceivedEvent.OutputObject
    >;

    "KyeStarted()": TypedContractEvent<
      KyeStartedEvent.InputTuple,
      KyeStartedEvent.OutputTuple,
      KyeStartedEvent.OutputObject
    >;
    KyeStarted: TypedContractEvent<
      KyeStartedEvent.InputTuple,
      KyeStartedEvent.OutputTuple,
      KyeStartedEvent.OutputObject
    >;

    "PayoutMade(address,uint256,uint256)": TypedContractEvent<
      PayoutMadeEvent.InputTuple,
      PayoutMadeEvent.OutputTuple,
      PayoutMadeEvent.OutputObject
    >;
    PayoutMade: TypedContractEvent<
      PayoutMadeEvent.InputTuple,
      PayoutMadeEvent.OutputTuple,
      PayoutMadeEvent.OutputObject
    >;

    "PenaltyApplied(address,uint256,uint256)": TypedContractEvent<
      PenaltyAppliedEvent.InputTuple,
      PenaltyAppliedEvent.OutputTuple,
      PenaltyAppliedEvent.OutputObject
    >;
    PenaltyApplied: TypedContractEvent<
      PenaltyAppliedEvent.InputTuple,
      PenaltyAppliedEvent.OutputTuple,
      PenaltyAppliedEvent.OutputObject
    >;
  };
}
