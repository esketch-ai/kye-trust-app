/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface KyeTrustFactoryInterface extends Interface {
  getFunction(
    nameOrSignature: "createKye" | "deployedKyes" | "getDeployedKyes"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "KyeCreated"): EventFragment;

  encodeFunctionData(
    functionFragment: "createKye",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike[],
      boolean,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deployedKyes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDeployedKyes",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "createKye", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deployedKyes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDeployedKyes",
    data: BytesLike
  ): Result;
}

export namespace KyeCreatedEvent {
  export type InputTuple = [
    kyeAddress: AddressLike,
    name: string,
    goalAmount: BigNumberish,
    owner: AddressLike
  ];
  export type OutputTuple = [
    kyeAddress: string,
    name: string,
    goalAmount: bigint,
    owner: string
  ];
  export interface OutputObject {
    kyeAddress: string;
    name: string;
    goalAmount: bigint;
    owner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface KyeTrustFactory extends BaseContract {
  connect(runner?: ContractRunner | null): KyeTrustFactory;
  waitForDeployment(): Promise<this>;

  interface: KyeTrustFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createKye: TypedContractMethod<
    [
      _name: string,
      _goalAmount: BigNumberish,
      _contributionAmount: BigNumberish,
      _duration: BigNumberish,
      _members: AddressLike[],
      _multiSigEnabled: boolean,
      _requiredConfirmations: BigNumberish
    ],
    [string],
    "nonpayable"
  >;

  deployedKyes: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  getDeployedKyes: TypedContractMethod<[], [string[]], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createKye"
  ): TypedContractMethod<
    [
      _name: string,
      _goalAmount: BigNumberish,
      _contributionAmount: BigNumberish,
      _duration: BigNumberish,
      _members: AddressLike[],
      _multiSigEnabled: boolean,
      _requiredConfirmations: BigNumberish
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deployedKyes"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getDeployedKyes"
  ): TypedContractMethod<[], [string[]], "view">;

  getEvent(
    key: "KyeCreated"
  ): TypedContractEvent<
    KyeCreatedEvent.InputTuple,
    KyeCreatedEvent.OutputTuple,
    KyeCreatedEvent.OutputObject
  >;

  filters: {
    "KyeCreated(address,string,uint256,address)": TypedContractEvent<
      KyeCreatedEvent.InputTuple,
      KyeCreatedEvent.OutputTuple,
      KyeCreatedEvent.OutputObject
    >;
    KyeCreated: TypedContractEvent<
      KyeCreatedEvent.InputTuple,
      KyeCreatedEvent.OutputTuple,
      KyeCreatedEvent.OutputObject
    >;
  };
}
